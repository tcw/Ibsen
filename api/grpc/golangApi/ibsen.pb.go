// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ibsen.proto

package golangApi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntryBatch struct {
	Entries              []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryBatch) Reset()         { *m = EntryBatch{} }
func (m *EntryBatch) String() string { return proto.CompactTextString(m) }
func (*EntryBatch) ProtoMessage()    {}
func (*EntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{0}
}

func (m *EntryBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryBatch.Unmarshal(m, b)
}
func (m *EntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryBatch.Marshal(b, m, deterministic)
}
func (m *EntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBatch.Merge(m, src)
}
func (m *EntryBatch) XXX_Size() int {
	return xxx_messageInfo_EntryBatch.Size(m)
}
func (m *EntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBatch proto.InternalMessageInfo

func (m *EntryBatch) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type TopicStatus struct {
	Created              bool     `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicStatus) Reset()         { *m = TopicStatus{} }
func (m *TopicStatus) String() string { return proto.CompactTextString(m) }
func (*TopicStatus) ProtoMessage()    {}
func (*TopicStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{1}
}

func (m *TopicStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicStatus.Unmarshal(m, b)
}
func (m *TopicStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicStatus.Marshal(b, m, deterministic)
}
func (m *TopicStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicStatus.Merge(m, src)
}
func (m *TopicStatus) XXX_Size() int {
	return xxx_messageInfo_TopicStatus.Size(m)
}
func (m *TopicStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TopicStatus proto.InternalMessageInfo

func (m *TopicStatus) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Offset struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Offset) Reset()         { *m = Offset{} }
func (m *Offset) String() string { return proto.CompactTextString(m) }
func (*Offset) ProtoMessage()    {}
func (*Offset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{3}
}

func (m *Offset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Offset.Unmarshal(m, b)
}
func (m *Offset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Offset.Marshal(b, m, deterministic)
}
func (m *Offset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offset.Merge(m, src)
}
func (m *Offset) XXX_Size() int {
	return xxx_messageInfo_Offset.Size(m)
}
func (m *Offset) XXX_DiscardUnknown() {
	xxx_messageInfo_Offset.DiscardUnknown(m)
}

var xxx_messageInfo_Offset proto.InternalMessageInfo

func (m *Offset) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Topics struct {
	Name                 []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topics) Reset()         { *m = Topics{} }
func (m *Topics) String() string { return proto.CompactTextString(m) }
func (*Topics) ProtoMessage()    {}
func (*Topics) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{4}
}

func (m *Topics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topics.Unmarshal(m, b)
}
func (m *Topics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topics.Marshal(b, m, deterministic)
}
func (m *Topics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topics.Merge(m, src)
}
func (m *Topics) XXX_Size() int {
	return xxx_messageInfo_Topics.Size(m)
}
func (m *Topics) XXX_DiscardUnknown() {
	xxx_messageInfo_Topics.DiscardUnknown(m)
}

var xxx_messageInfo_Topics proto.InternalMessageInfo

func (m *Topics) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type Topic struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{5}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TopicBatch struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BatchSize            uint32   `protobuf:"varint,2,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicBatch) Reset()         { *m = TopicBatch{} }
func (m *TopicBatch) String() string { return proto.CompactTextString(m) }
func (*TopicBatch) ProtoMessage()    {}
func (*TopicBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{6}
}

func (m *TopicBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicBatch.Unmarshal(m, b)
}
func (m *TopicBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicBatch.Marshal(b, m, deterministic)
}
func (m *TopicBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicBatch.Merge(m, src)
}
func (m *TopicBatch) XXX_Size() int {
	return xxx_messageInfo_TopicBatch.Size(m)
}
func (m *TopicBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicBatch.DiscardUnknown(m)
}

var xxx_messageInfo_TopicBatch proto.InternalMessageInfo

func (m *TopicBatch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopicBatch) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type TopicOffset struct {
	TopicName            string   `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicOffset) Reset()         { *m = TopicOffset{} }
func (m *TopicOffset) String() string { return proto.CompactTextString(m) }
func (*TopicOffset) ProtoMessage()    {}
func (*TopicOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{7}
}

func (m *TopicOffset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicOffset.Unmarshal(m, b)
}
func (m *TopicOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicOffset.Marshal(b, m, deterministic)
}
func (m *TopicOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicOffset.Merge(m, src)
}
func (m *TopicOffset) XXX_Size() int {
	return xxx_messageInfo_TopicOffset.Size(m)
}
func (m *TopicOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicOffset.DiscardUnknown(m)
}

var xxx_messageInfo_TopicOffset proto.InternalMessageInfo

func (m *TopicOffset) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *TopicOffset) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type TopicOffsets struct {
	TopicOffset          []*TopicOffset `protobuf:"bytes,1,rep,name=topicOffset,proto3" json:"topicOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicOffsets) Reset()         { *m = TopicOffsets{} }
func (m *TopicOffsets) String() string { return proto.CompactTextString(m) }
func (*TopicOffsets) ProtoMessage()    {}
func (*TopicOffsets) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{8}
}

func (m *TopicOffsets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicOffsets.Unmarshal(m, b)
}
func (m *TopicOffsets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicOffsets.Marshal(b, m, deterministic)
}
func (m *TopicOffsets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicOffsets.Merge(m, src)
}
func (m *TopicOffsets) XXX_Size() int {
	return xxx_messageInfo_TopicOffsets.Size(m)
}
func (m *TopicOffsets) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicOffsets.DiscardUnknown(m)
}

var xxx_messageInfo_TopicOffsets proto.InternalMessageInfo

func (m *TopicOffsets) GetTopicOffset() []*TopicOffset {
	if m != nil {
		return m.TopicOffset
	}
	return nil
}

type TopicBatchOffset struct {
	TopicName            string   `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	BatchSize            uint32   `protobuf:"varint,3,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicBatchOffset) Reset()         { *m = TopicBatchOffset{} }
func (m *TopicBatchOffset) String() string { return proto.CompactTextString(m) }
func (*TopicBatchOffset) ProtoMessage()    {}
func (*TopicBatchOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{9}
}

func (m *TopicBatchOffset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicBatchOffset.Unmarshal(m, b)
}
func (m *TopicBatchOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicBatchOffset.Marshal(b, m, deterministic)
}
func (m *TopicBatchOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicBatchOffset.Merge(m, src)
}
func (m *TopicBatchOffset) XXX_Size() int {
	return xxx_messageInfo_TopicBatchOffset.Size(m)
}
func (m *TopicBatchOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicBatchOffset.DiscardUnknown(m)
}

var xxx_messageInfo_TopicBatchOffset proto.InternalMessageInfo

func (m *TopicBatchOffset) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *TopicBatchOffset) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TopicBatchOffset) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type TopicMessage struct {
	TopicName            string   `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	MessagePayload       []byte   `protobuf:"bytes,2,opt,name=messagePayload,proto3" json:"messagePayload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicMessage) Reset()         { *m = TopicMessage{} }
func (m *TopicMessage) String() string { return proto.CompactTextString(m) }
func (*TopicMessage) ProtoMessage()    {}
func (*TopicMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{10}
}

func (m *TopicMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicMessage.Unmarshal(m, b)
}
func (m *TopicMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicMessage.Marshal(b, m, deterministic)
}
func (m *TopicMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMessage.Merge(m, src)
}
func (m *TopicMessage) XXX_Size() int {
	return xxx_messageInfo_TopicMessage.Size(m)
}
func (m *TopicMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMessage proto.InternalMessageInfo

func (m *TopicMessage) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *TopicMessage) GetMessagePayload() []byte {
	if m != nil {
		return m.MessagePayload
	}
	return nil
}

type TopicBatchMessage struct {
	TopicName            string   `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	MessagePayload       [][]byte `protobuf:"bytes,2,rep,name=messagePayload,proto3" json:"messagePayload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicBatchMessage) Reset()         { *m = TopicBatchMessage{} }
func (m *TopicBatchMessage) String() string { return proto.CompactTextString(m) }
func (*TopicBatchMessage) ProtoMessage()    {}
func (*TopicBatchMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{11}
}

func (m *TopicBatchMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicBatchMessage.Unmarshal(m, b)
}
func (m *TopicBatchMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicBatchMessage.Marshal(b, m, deterministic)
}
func (m *TopicBatchMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicBatchMessage.Merge(m, src)
}
func (m *TopicBatchMessage) XXX_Size() int {
	return xxx_messageInfo_TopicBatchMessage.Size(m)
}
func (m *TopicBatchMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicBatchMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TopicBatchMessage proto.InternalMessageInfo

func (m *TopicBatchMessage) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *TopicBatchMessage) GetMessagePayload() [][]byte {
	if m != nil {
		return m.MessagePayload
	}
	return nil
}

type Message struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{12}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Entry struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{13}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Entry) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Status struct {
	Entries              int32    `protobuf:"varint,1,opt,name=entries,proto3" json:"entries,omitempty"`
	Current              *Offset  `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3e5c14afe4be539, []int{14}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetEntries() int32 {
	if m != nil {
		return m.Entries
	}
	return 0
}

func (m *Status) GetCurrent() *Offset {
	if m != nil {
		return m.Current
	}
	return nil
}

func init() {
	proto.RegisterType((*EntryBatch)(nil), "EntryBatch")
	proto.RegisterType((*TopicStatus)(nil), "TopicStatus")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Offset)(nil), "Offset")
	proto.RegisterType((*Topics)(nil), "Topics")
	proto.RegisterType((*Topic)(nil), "Topic")
	proto.RegisterType((*TopicBatch)(nil), "TopicBatch")
	proto.RegisterType((*TopicOffset)(nil), "TopicOffset")
	proto.RegisterType((*TopicOffsets)(nil), "TopicOffsets")
	proto.RegisterType((*TopicBatchOffset)(nil), "TopicBatchOffset")
	proto.RegisterType((*TopicMessage)(nil), "TopicMessage")
	proto.RegisterType((*TopicBatchMessage)(nil), "TopicBatchMessage")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*Entry)(nil), "Entry")
	proto.RegisterType((*Status)(nil), "Status")
}

func init() { proto.RegisterFile("ibsen.proto", fileDescriptor_c3e5c14afe4be539) }

var fileDescriptor_c3e5c14afe4be539 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6b, 0xdb, 0x3c,
	0x14, 0xae, 0x92, 0xd8, 0x7e, 0x7b, 0x9c, 0x86, 0x37, 0x6a, 0x29, 0x26, 0x0b, 0x5b, 0xaa, 0xc1,
	0x1a, 0x36, 0x50, 0x4a, 0x06, 0x83, 0xde, 0x14, 0x9a, 0x91, 0x41, 0x2f, 0xd6, 0x05, 0xa7, 0x30,
	0xb6, 0x3b, 0xc7, 0x51, 0x5c, 0x41, 0xfc, 0x81, 0xac, 0x50, 0xb2, 0x9f, 0xb3, 0x5f, 0xb6, 0x9f,
	0x32, 0x2c, 0xcb, 0xb1, 0x9d, 0xb6, 0x0c, 0xb6, 0x3b, 0xe9, 0x9c, 0xe7, 0x9c, 0xe7, 0x7c, 0x83,
	0xcd, 0x17, 0x29, 0x8b, 0x68, 0x22, 0x62, 0x19, 0x13, 0x0a, 0x30, 0x8d, 0xa4, 0xd8, 0x4e, 0x3c,
	0xe9, 0xdf, 0xe3, 0x01, 0x58, 0x2c, 0x92, 0x82, 0xb3, 0xd4, 0x41, 0x83, 0xe6, 0xd0, 0x1e, 0x9b,
	0x54, 0x69, 0xdd, 0x42, 0x4c, 0xce, 0xc1, 0xbe, 0x8b, 0x13, 0xee, 0xcf, 0xa5, 0x27, 0x37, 0x29,
	0x76, 0xc0, 0xf2, 0x05, 0xf3, 0x24, 0x5b, 0x3a, 0x68, 0x80, 0x86, 0xff, 0xb9, 0xc5, 0x97, 0x58,
	0x60, 0x4c, 0xc3, 0x44, 0x6e, 0x89, 0x03, 0xe6, 0x97, 0xd5, 0x2a, 0x65, 0x12, 0x77, 0xa0, 0xc1,
	0x73, 0x5c, 0xcb, 0x6d, 0xf0, 0x25, 0xe9, 0x83, 0xa9, 0x7c, 0xa5, 0x18, 0x43, 0x2b, 0xf2, 0x42,
	0xa6, 0x48, 0x0f, 0x5d, 0xf5, 0x26, 0x2f, 0xc0, 0x50, 0xda, 0x8a, 0x12, 0xed, 0x94, 0x57, 0x00,
	0x4a, 0x99, 0x87, 0xfd, 0x04, 0x02, 0xf7, 0xe1, 0x70, 0x91, 0x29, 0xe7, 0xfc, 0x07, 0x73, 0x1a,
	0x03, 0x34, 0x3c, 0x72, 0x4b, 0x01, 0xf9, 0xa8, 0xd3, 0xd0, 0x91, 0xf5, 0xe1, 0x50, 0x66, 0xdf,
	0xdb, 0xd2, 0x4b, 0x29, 0xc0, 0xa7, 0x60, 0xc6, 0x0a, 0xa7, 0xfc, 0xb4, 0x5c, 0xfd, 0x23, 0x57,
	0xd0, 0xae, 0x38, 0x49, 0x31, 0x05, 0x5b, 0x96, 0x7f, 0x5d, 0xc1, 0x36, 0xad, 0x60, 0xdc, 0x2a,
	0x80, 0xac, 0xe0, 0xff, 0x32, 0x89, 0x7f, 0x89, 0xa4, 0x9e, 0x6c, 0x73, 0x3f, 0xd9, 0x3b, 0x1d,
	0xe7, 0x67, 0x96, 0xa6, 0x5e, 0xc0, 0xfe, 0xc0, 0xf1, 0x06, 0x3a, 0x61, 0x0e, 0x9c, 0x79, 0xdb,
	0x75, 0xec, 0x2d, 0x15, 0x57, 0xdb, 0xdd, 0x93, 0x92, 0x6f, 0xd0, 0x2d, 0xa3, 0xff, 0x7b, 0xd7,
	0xcd, 0x27, 0x5c, 0xbf, 0x06, 0xab, 0x70, 0xe8, 0x80, 0x95, 0x68, 0x2c, 0x52, 0x61, 0x14, 0x5f,
	0x72, 0x09, 0x86, 0x9a, 0xcd, 0x4a, 0x51, 0x50, 0xad, 0x28, 0x15, 0xd3, 0x46, 0xdd, 0x74, 0x0a,
	0x66, 0x39, 0xbf, 0xe5, 0xc0, 0xa3, 0xa1, 0xb1, 0x1b, 0x74, 0x7c, 0x06, 0x96, 0xbf, 0x11, 0x82,
	0x45, 0x79, 0xad, 0xed, 0xb1, 0x45, 0x75, 0x0f, 0x0b, 0xf9, 0xf8, 0x57, 0x13, 0x8c, 0x9b, 0x6c,
	0x97, 0xf0, 0x00, 0xcc, 0x7c, 0xee, 0xb1, 0x99, 0xb7, 0xbb, 0xa7, 0xdb, 0x9e, 0xd3, 0x90, 0x03,
	0xfc, 0x12, 0x5a, 0x4b, 0x11, 0x27, 0xcf, 0xea, 0x5f, 0x01, 0xac, 0x79, 0x2a, 0xf5, 0x3e, 0x98,
	0x54, 0xed, 0x4e, 0xcf, 0xca, 0x51, 0x19, 0x60, 0x04, 0x27, 0x25, 0xe0, 0x2b, 0x97, 0xc5, 0xc0,
	0x14, 0xd0, 0xa3, 0xea, 0x9c, 0x65, 0x06, 0x67, 0x60, 0x3c, 0x08, 0x2e, 0x19, 0xd6, 0x1a, 0x5d,
	0xd1, 0x9e, 0x45, 0x77, 0xa4, 0xef, 0x00, 0x14, 0x44, 0x6f, 0x11, 0x7d, 0xd4, 0xcf, 0x3a, 0xd8,
	0x56, 0xe0, 0xb9, 0x14, 0xcc, 0x0b, 0x9f, 0xf7, 0x3a, 0x44, 0x17, 0x08, 0x9f, 0x43, 0x57, 0x30,
	0x6f, 0xf9, 0x49, 0xc4, 0xe1, 0x84, 0x05, 0x3c, 0x8a, 0x78, 0x14, 0xec, 0x72, 0xd7, 0x47, 0x85,
	0x1c, 0x5c, 0x20, 0xfc, 0x01, 0x4e, 0x33, 0xa0, 0x22, 0xad, 0xa3, 0xed, 0x4a, 0x38, 0x3d, 0x9b,
	0x96, 0x57, 0x4a, 0xd9, 0xbd, 0x85, 0x4e, 0x41, 0xa0, 0x0b, 0x51, 0x5b, 0xb4, 0x1a, 0xc7, 0x25,
	0x1c, 0xd7, 0x38, 0xb4, 0x41, 0x97, 0xee, 0x6f, 0xdf, 0x23, 0x9a, 0xc9, 0x35, 0x9c, 0x04, 0x5c,
	0xde, 0x6f, 0x16, 0xd4, 0x8f, 0x43, 0x2a, 0xfd, 0x07, 0xaa, 0x8e, 0xe7, 0x04, 0x54, 0xdf, 0x67,
	0xd9, 0x09, 0x9d, 0xa1, 0xef, 0xc7, 0x23, 0x2f, 0xe1, 0xa3, 0x40, 0x24, 0xfe, 0x28, 0x88, 0xd7,
	0x5e, 0x14, 0x5c, 0x27, 0xfc, 0x67, 0xc3, 0xb8, 0x99, 0xcc, 0xa7, 0xb7, 0x0b, 0x53, 0x1d, 0xda,
	0xf7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x0f, 0x55, 0xd4, 0x77, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IbsenClient is the client API for Ibsen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IbsenClient interface {
	Create(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*TopicStatus, error)
	Drop(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*TopicStatus, error)
	ListTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Topics, error)
	ListTopicsWithOffset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicOffsets, error)
	Write(ctx context.Context, in *TopicMessage, opts ...grpc.CallOption) (*Status, error)
	WriteBatch(ctx context.Context, in *TopicBatchMessage, opts ...grpc.CallOption) (*Status, error)
	WriteStream(ctx context.Context, opts ...grpc.CallOption) (Ibsen_WriteStreamClient, error)
	ReadFromBeginning(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Ibsen_ReadFromBeginningClient, error)
	ReadBatchFromBeginning(ctx context.Context, in *TopicBatch, opts ...grpc.CallOption) (Ibsen_ReadBatchFromBeginningClient, error)
	ReadFromOffset(ctx context.Context, in *TopicOffset, opts ...grpc.CallOption) (Ibsen_ReadFromOffsetClient, error)
	ReadBatchFromOffset(ctx context.Context, in *TopicBatchOffset, opts ...grpc.CallOption) (Ibsen_ReadBatchFromOffsetClient, error)
}

type ibsenClient struct {
	cc grpc.ClientConnInterface
}

func NewIbsenClient(cc grpc.ClientConnInterface) IbsenClient {
	return &ibsenClient{cc}
}

func (c *ibsenClient) Create(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*TopicStatus, error) {
	out := new(TopicStatus)
	err := c.cc.Invoke(ctx, "/Ibsen/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) Drop(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*TopicStatus, error) {
	out := new(TopicStatus)
	err := c.cc.Invoke(ctx, "/Ibsen/drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) ListTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Topics, error) {
	out := new(Topics)
	err := c.cc.Invoke(ctx, "/Ibsen/listTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) ListTopicsWithOffset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicOffsets, error) {
	out := new(TopicOffsets)
	err := c.cc.Invoke(ctx, "/Ibsen/listTopicsWithOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) Write(ctx context.Context, in *TopicMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Ibsen/write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) WriteBatch(ctx context.Context, in *TopicBatchMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Ibsen/writeBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) WriteStream(ctx context.Context, opts ...grpc.CallOption) (Ibsen_WriteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ibsen_serviceDesc.Streams[0], "/Ibsen/writeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibsenWriteStreamClient{stream}
	return x, nil
}

type Ibsen_WriteStreamClient interface {
	Send(*TopicMessage) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type ibsenWriteStreamClient struct {
	grpc.ClientStream
}

func (x *ibsenWriteStreamClient) Send(m *TopicMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ibsenWriteStreamClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ibsenClient) ReadFromBeginning(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Ibsen_ReadFromBeginningClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ibsen_serviceDesc.Streams[1], "/Ibsen/readFromBeginning", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibsenReadFromBeginningClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ibsen_ReadFromBeginningClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type ibsenReadFromBeginningClient struct {
	grpc.ClientStream
}

func (x *ibsenReadFromBeginningClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ibsenClient) ReadBatchFromBeginning(ctx context.Context, in *TopicBatch, opts ...grpc.CallOption) (Ibsen_ReadBatchFromBeginningClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ibsen_serviceDesc.Streams[2], "/Ibsen/readBatchFromBeginning", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibsenReadBatchFromBeginningClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ibsen_ReadBatchFromBeginningClient interface {
	Recv() (*EntryBatch, error)
	grpc.ClientStream
}

type ibsenReadBatchFromBeginningClient struct {
	grpc.ClientStream
}

func (x *ibsenReadBatchFromBeginningClient) Recv() (*EntryBatch, error) {
	m := new(EntryBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ibsenClient) ReadFromOffset(ctx context.Context, in *TopicOffset, opts ...grpc.CallOption) (Ibsen_ReadFromOffsetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ibsen_serviceDesc.Streams[3], "/Ibsen/readFromOffset", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibsenReadFromOffsetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ibsen_ReadFromOffsetClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type ibsenReadFromOffsetClient struct {
	grpc.ClientStream
}

func (x *ibsenReadFromOffsetClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ibsenClient) ReadBatchFromOffset(ctx context.Context, in *TopicBatchOffset, opts ...grpc.CallOption) (Ibsen_ReadBatchFromOffsetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ibsen_serviceDesc.Streams[4], "/Ibsen/readBatchFromOffset", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibsenReadBatchFromOffsetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ibsen_ReadBatchFromOffsetClient interface {
	Recv() (*EntryBatch, error)
	grpc.ClientStream
}

type ibsenReadBatchFromOffsetClient struct {
	grpc.ClientStream
}

func (x *ibsenReadBatchFromOffsetClient) Recv() (*EntryBatch, error) {
	m := new(EntryBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IbsenServer is the server API for Ibsen service.
type IbsenServer interface {
	Create(context.Context, *Topic) (*TopicStatus, error)
	Drop(context.Context, *Topic) (*TopicStatus, error)
	ListTopics(context.Context, *Empty) (*Topics, error)
	ListTopicsWithOffset(context.Context, *Empty) (*TopicOffsets, error)
	Write(context.Context, *TopicMessage) (*Status, error)
	WriteBatch(context.Context, *TopicBatchMessage) (*Status, error)
	WriteStream(Ibsen_WriteStreamServer) error
	ReadFromBeginning(*Topic, Ibsen_ReadFromBeginningServer) error
	ReadBatchFromBeginning(*TopicBatch, Ibsen_ReadBatchFromBeginningServer) error
	ReadFromOffset(*TopicOffset, Ibsen_ReadFromOffsetServer) error
	ReadBatchFromOffset(*TopicBatchOffset, Ibsen_ReadBatchFromOffsetServer) error
}

// UnimplementedIbsenServer can be embedded to have forward compatible implementations.
type UnimplementedIbsenServer struct {
}

func (*UnimplementedIbsenServer) Create(ctx context.Context, req *Topic) (*TopicStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedIbsenServer) Drop(ctx context.Context, req *Topic) (*TopicStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (*UnimplementedIbsenServer) ListTopics(ctx context.Context, req *Empty) (*Topics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (*UnimplementedIbsenServer) ListTopicsWithOffset(ctx context.Context, req *Empty) (*TopicOffsets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopicsWithOffset not implemented")
}
func (*UnimplementedIbsenServer) Write(ctx context.Context, req *TopicMessage) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedIbsenServer) WriteBatch(ctx context.Context, req *TopicBatchMessage) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBatch not implemented")
}
func (*UnimplementedIbsenServer) WriteStream(srv Ibsen_WriteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteStream not implemented")
}
func (*UnimplementedIbsenServer) ReadFromBeginning(req *Topic, srv Ibsen_ReadFromBeginningServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFromBeginning not implemented")
}
func (*UnimplementedIbsenServer) ReadBatchFromBeginning(req *TopicBatch, srv Ibsen_ReadBatchFromBeginningServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBatchFromBeginning not implemented")
}
func (*UnimplementedIbsenServer) ReadFromOffset(req *TopicOffset, srv Ibsen_ReadFromOffsetServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFromOffset not implemented")
}
func (*UnimplementedIbsenServer) ReadBatchFromOffset(req *TopicBatchOffset, srv Ibsen_ReadBatchFromOffsetServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBatchFromOffset not implemented")
}

func RegisterIbsenServer(s *grpc.Server, srv IbsenServer) {
	s.RegisterService(&_Ibsen_serviceDesc, srv)
}

func _Ibsen_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ibsen/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).Create(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ibsen/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).Drop(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ibsen/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).ListTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_ListTopicsWithOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).ListTopicsWithOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ibsen/ListTopicsWithOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).ListTopicsWithOffset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ibsen/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).Write(ctx, req.(*TopicMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_WriteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicBatchMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).WriteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ibsen/WriteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).WriteBatch(ctx, req.(*TopicBatchMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_WriteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IbsenServer).WriteStream(&ibsenWriteStreamServer{stream})
}

type Ibsen_WriteStreamServer interface {
	Send(*Status) error
	Recv() (*TopicMessage, error)
	grpc.ServerStream
}

type ibsenWriteStreamServer struct {
	grpc.ServerStream
}

func (x *ibsenWriteStreamServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ibsenWriteStreamServer) Recv() (*TopicMessage, error) {
	m := new(TopicMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ibsen_ReadFromBeginning_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbsenServer).ReadFromBeginning(m, &ibsenReadFromBeginningServer{stream})
}

type Ibsen_ReadFromBeginningServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type ibsenReadFromBeginningServer struct {
	grpc.ServerStream
}

func (x *ibsenReadFromBeginningServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

func _Ibsen_ReadBatchFromBeginning_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopicBatch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbsenServer).ReadBatchFromBeginning(m, &ibsenReadBatchFromBeginningServer{stream})
}

type Ibsen_ReadBatchFromBeginningServer interface {
	Send(*EntryBatch) error
	grpc.ServerStream
}

type ibsenReadBatchFromBeginningServer struct {
	grpc.ServerStream
}

func (x *ibsenReadBatchFromBeginningServer) Send(m *EntryBatch) error {
	return x.ServerStream.SendMsg(m)
}

func _Ibsen_ReadFromOffset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopicOffset)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbsenServer).ReadFromOffset(m, &ibsenReadFromOffsetServer{stream})
}

type Ibsen_ReadFromOffsetServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type ibsenReadFromOffsetServer struct {
	grpc.ServerStream
}

func (x *ibsenReadFromOffsetServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

func _Ibsen_ReadBatchFromOffset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopicBatchOffset)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbsenServer).ReadBatchFromOffset(m, &ibsenReadBatchFromOffsetServer{stream})
}

type Ibsen_ReadBatchFromOffsetServer interface {
	Send(*EntryBatch) error
	grpc.ServerStream
}

type ibsenReadBatchFromOffsetServer struct {
	grpc.ServerStream
}

func (x *ibsenReadBatchFromOffsetServer) Send(m *EntryBatch) error {
	return x.ServerStream.SendMsg(m)
}

var _Ibsen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ibsen",
	HandlerType: (*IbsenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Ibsen_Create_Handler,
		},
		{
			MethodName: "drop",
			Handler:    _Ibsen_Drop_Handler,
		},
		{
			MethodName: "listTopics",
			Handler:    _Ibsen_ListTopics_Handler,
		},
		{
			MethodName: "listTopicsWithOffset",
			Handler:    _Ibsen_ListTopicsWithOffset_Handler,
		},
		{
			MethodName: "write",
			Handler:    _Ibsen_Write_Handler,
		},
		{
			MethodName: "writeBatch",
			Handler:    _Ibsen_WriteBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "writeStream",
			Handler:       _Ibsen_WriteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "readFromBeginning",
			Handler:       _Ibsen_ReadFromBeginning_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "readBatchFromBeginning",
			Handler:       _Ibsen_ReadBatchFromBeginning_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "readFromOffset",
			Handler:       _Ibsen_ReadFromOffset_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "readBatchFromOffset",
			Handler:       _Ibsen_ReadBatchFromOffset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ibsen.proto",
}
