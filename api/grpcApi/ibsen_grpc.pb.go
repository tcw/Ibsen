// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: ibsen.proto

package grpcApi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ibsen_Write_FullMethodName = "/Ibsen/write"
	Ibsen_Read_FullMethodName  = "/Ibsen/read"
	Ibsen_List_FullMethodName  = "/Ibsen/list"
)

// IbsenClient is the client API for Ibsen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IbsenClient interface {
	Write(ctx context.Context, in *InputEntries, opts ...grpc.CallOption) (*WriteStatus, error)
	Read(ctx context.Context, in *ReadParams, opts ...grpc.CallOption) (Ibsen_ReadClient, error)
	List(ctx context.Context, in *EmptyArgs, opts ...grpc.CallOption) (*TopicList, error)
}

type ibsenClient struct {
	cc grpc.ClientConnInterface
}

func NewIbsenClient(cc grpc.ClientConnInterface) IbsenClient {
	return &ibsenClient{cc}
}

func (c *ibsenClient) Write(ctx context.Context, in *InputEntries, opts ...grpc.CallOption) (*WriteStatus, error) {
	out := new(WriteStatus)
	err := c.cc.Invoke(ctx, Ibsen_Write_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibsenClient) Read(ctx context.Context, in *ReadParams, opts ...grpc.CallOption) (Ibsen_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ibsen_ServiceDesc.Streams[0], Ibsen_Read_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ibsenReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ibsen_ReadClient interface {
	Recv() (*OutputEntries, error)
	grpc.ClientStream
}

type ibsenReadClient struct {
	grpc.ClientStream
}

func (x *ibsenReadClient) Recv() (*OutputEntries, error) {
	m := new(OutputEntries)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ibsenClient) List(ctx context.Context, in *EmptyArgs, opts ...grpc.CallOption) (*TopicList, error) {
	out := new(TopicList)
	err := c.cc.Invoke(ctx, Ibsen_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IbsenServer is the server API for Ibsen service.
// All implementations must embed UnimplementedIbsenServer
// for forward compatibility
type IbsenServer interface {
	Write(context.Context, *InputEntries) (*WriteStatus, error)
	Read(*ReadParams, Ibsen_ReadServer) error
	List(context.Context, *EmptyArgs) (*TopicList, error)
	mustEmbedUnimplementedIbsenServer()
}

// UnimplementedIbsenServer must be embedded to have forward compatible implementations.
type UnimplementedIbsenServer struct {
}

func (UnimplementedIbsenServer) Write(context.Context, *InputEntries) (*WriteStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedIbsenServer) Read(*ReadParams, Ibsen_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedIbsenServer) List(context.Context, *EmptyArgs) (*TopicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIbsenServer) mustEmbedUnimplementedIbsenServer() {}

// UnsafeIbsenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IbsenServer will
// result in compilation errors.
type UnsafeIbsenServer interface {
	mustEmbedUnimplementedIbsenServer()
}

func RegisterIbsenServer(s grpc.ServiceRegistrar, srv IbsenServer) {
	s.RegisterService(&Ibsen_ServiceDesc, srv)
}

func _Ibsen_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputEntries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ibsen_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).Write(ctx, req.(*InputEntries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ibsen_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbsenServer).Read(m, &ibsenReadServer{stream})
}

type Ibsen_ReadServer interface {
	Send(*OutputEntries) error
	grpc.ServerStream
}

type ibsenReadServer struct {
	grpc.ServerStream
}

func (x *ibsenReadServer) Send(m *OutputEntries) error {
	return x.ServerStream.SendMsg(m)
}

func _Ibsen_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbsenServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ibsen_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbsenServer).List(ctx, req.(*EmptyArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Ibsen_ServiceDesc is the grpc.ServiceDesc for Ibsen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ibsen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ibsen",
	HandlerType: (*IbsenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "write",
			Handler:    _Ibsen_Write_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Ibsen_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "read",
			Handler:       _Ibsen_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ibsen.proto",
}
